import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { createPost, updatePost } from '../../../redux/actions/postAction';

import { imageShow, videoShow } from '../../../utils/mediaShow';
import { GLOBALTYPES } from '../../../redux/actions/globalTypes';

const Vente = () => {
    const { auth, theme, socket, statusImmobilierReducer, categories, category } = useSelector((state) => state);
    const { vente } = statusImmobilierReducer;
    const dispatch = useDispatch();

    const [content, setContent] = useState('');
    const [images, setImages] = useState([]);

    const [subCategory, setSubCategory] = useState('telefono');




    const handleCategoryChange = (e) => {
        const selectedCategory = e.target.value;
        dispatch({
            type: 'SET_CATEGORY', // Asegúrate de que esta acción esté configurada correctamente en tu reducer
            payload: selectedCategory,
        });
        setSubCategory(''); // Reiniciar subcategoría al cambiar de categoría
    };

    const [stream, setStream] = useState(false);
    const videoRef = useRef();
    const refCanvas = useRef();
    const [tracks, setTracks] = useState('');



    const handleStream = () => {
        setStream(true);
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices
                .getUserMedia({ video: true })
                .then(mediaStream => {
                    videoRef.current.srcObject = mediaStream;
                    videoRef.current.play();

                    const track = mediaStream.getTracks();
                    setTracks(track[0]);
                })
                .catch(err => console.log(err));
        }
    };

    const handleCapture = () => {
        const width = videoRef.current.clientWidth;
        const height = videoRef.current.clientHeight;

        refCanvas.current.setAttribute('width', width);
        refCanvas.current.setAttribute('height', height);

        const ctx = refCanvas.current.getContext('2d');
        ctx.drawImage(videoRef.current, 0, 0, width, height);
        let URL = refCanvas.current.toDataURL();
        setImages([...images, { camera: URL }]);
    };

    const handleStopStream = () => {
        tracks.stop();
        setStream(false);
    };
    const handleChangeImages = (e) => {
        const files = [...e.target.files];
        let err = '';
        let newImages = [];

        files.forEach((file) => {
            if (!file) return (err = 'File does not exist.');

            if (file.size > 1024 * 1024 * 5) {
                return (err = 'The image/video largest is 5mb.');
            }

            return newImages.push(file);
        });

        if (err) dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });
        setImages([...images, ...newImages]);
    };

    const deleteImages = (index) => {
        const newArr = [...images];
        newArr.splice(index, 1);
        setImages(newArr);
    };
    const handleSubmit = (e) => {
        e.preventDefault();

        if (!content || !category) {
            return dispatch({
                type: GLOBALTYPES.ALERT,
                payload: { error: 'Please fill in all required fields.' },
            });
        }


        if (images.length === 0)
            return dispatch({
                type: GLOBALTYPES.ALERT,
                payload: { error: 'Please add your photo.' },
            });

        const postData = {
            content,
            images,
            category,
            subCategory,
            auth,
            socket,
        };

        if (vente.onEdit) {
            dispatch(updatePost({ ...postData, vente }));
        } else {
            dispatch(createPost(postData));
        }

        // Reset form fields
        setContent('');
        setImages([]);

        setSubCategory('');
        if (tracks) tracks.stop();
        dispatch({ type: GLOBALTYPES.VENTE, payload: false });
    };


    useEffect(() => {
        if (vente.onEdit) {
            setContent(vente.content);
            setImages(vente.images);

            setSubCategory(vente.subCategory || '');
        }
    }, [vente]);

    return (
        <div className="status_modal">
            <form onSubmit={handleSubmit}>
                <div className="status_header">
                    <h5 className="m-0">Create Post</h5>
                    <span
                        onClick={() =>
                            dispatch({
                                type: GLOBALTYPES.VENTE,
                                payload: false,
                            })
                        }
                    >
                        &times;
                    </span>
                </div>

                <div className="status_body">
                    <label htmlFor="content">Post Content</label>
                    <textarea
                        name="content"
                        id="content"
                        value={content}
                        onChange={(e) => setContent(e.target.value)}
                        placeholder="What's on your mind?"
                    />

                    <div>
                        {category && Array.isArray(categories) && (
                            <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)}>
                                <option value="">Select Sub-Category</option>
                                {categories
                                    .find((cat) => cat._id === category)
                                    ?.subCategories.map((sub) => (
                                        <option key={sub._id} value={sub._id}>
                                            {sub.name}
                                        </option>
                                    ))}
                            </select>
                        )}




                        {category && (
                            <select value={subCategory} onChange={(e) => setSubCategory(e.target.value)}>
                                <option value="">Select Sub-Category</option>
                                {categories
                                    .find((cat) => cat._id === category)
                                    ?.subCategories.map((sub) => (
                                        <option key={sub._id} value={sub._id}>
                                            {sub.name}
                                        </option>
                                    ))}
                            </select>
                        )}
                    </div>


                    <div className="show_images">
                        {
                            images.map((img, index) => (
                                <div key={index} id="file_img">
                                    {
                                        img.camera ? imageShow(img.camera, theme)
                                            : img.url
                                                ? <>
                                                    {
                                                        img.url.match(/video/i)
                                                            ? videoShow(img.url, theme)
                                                            : imageShow(img.url, theme)
                                                    }
                                                </>
                                                : <>
                                                    {
                                                        img.type.match(/video/i)
                                                            ? videoShow(URL.createObjectURL(img), theme)
                                                            : imageShow(URL.createObjectURL(img), theme)
                                                    }
                                                </>
                                    }
                                    <span onClick={() => deleteImages(index)}>&times;</span>
                                </div>
                            ))
                        }
                    </div>

                    {
                        stream &&
                        <div className="stream position-relative">
                            <video autoPlay muted ref={videoRef} width="100%" height="100%"
                                style={{ filter: theme ? 'invert(1)' : 'invert(0)' }} />

                            <span onClick={handleStopStream}>&times;</span>
                            <canvas ref={refCanvas} style={{ display: 'none' }} />
                        </div>
                    }

                    <div className="input_images">
                        {
                            stream
                                ? <i className="fas fa-camera" onClick={handleCapture} />
                                : <>
                                    <i className="fas fa-camera" onClick={handleStream} />

                                    <div className="file_upload">
                                        <i className="fas fa-image" />
                                        <input type="file" name="file" id="file"
                                            multiple accept="image/*,video/*" onChange={handleChangeImages} />
                                    </div>
                                </>
                        }

                    </div>









                </div>

                <div className="status_footer">
                    <button className="btn btn-secondary w-100" type="submit">
                        Post
                    </button>
                </div>
            </form>
        </div>
    );
};

export default Vente;
