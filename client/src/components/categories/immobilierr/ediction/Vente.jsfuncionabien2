import React, { useState, useRef, useEffect } from 'react';
import { useSelector, useDispatch } from 'react-redux';

import { createPost, updatePost } from '../../../redux/actions/postAction';
import { imageShow, videoShow } from '../../../utils/mediaShow';

import { GLOBALTYPES } from '../../../redux/actions/globalTypes';

const Vente = () => {
    const { auth, theme, socket, statusImmobilierReducer } = useSelector((state) => state);
    const { vente } = statusImmobilierReducer
    const dispatch = useDispatch();

    // Un estado combinado para content y email
    const [postData, setPostData] = useState({
        content: "",
        email: "",
        superficie: "",
        piece: "",
        etage: "",
        papiers: "",
        papiersOption: "", // Nuevo campo para seleccionar la opción de "papiers"
        papiersSubOption: "" // Nuevo campo para seleccionar "oferta" o "change"
    });
    

    const [images, setImages] = useState([]);

    const [stream, setStream] = useState(false);
    const videoRef = useRef();
    const refCanvas = useRef();
    const [tracks, setTracks] = useState('');

    const handleChangeImages = e => {
        const files = [...e.target.files];
        let err = '';
        let newImages = [];

        files.forEach(file => {
            if (!file) return (err = 'File does not exist.');

            if (file.size > 1024 * 1024 * 5) {
                return (err = 'The image/video largest is 5mb.');
            }

            return newImages.push(file);
        });

        if (err) dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } });
        setImages([...images, ...newImages]);
    };

    const deleteImages = index => {
        const newArr = [...images];
        newArr.splice(index, 1);
        setImages(newArr);
    };

    const handleStream = () => {
        setStream(true);
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices
                .getUserMedia({ video: true })
                .then(mediaStream => {
                    videoRef.current.srcObject = mediaStream;
                    videoRef.current.play();

                    const track = mediaStream.getTracks();
                    setTracks(track[0]);
                })
                .catch(err => console.log(err));
        }
    };

    const handleCapture = () => {
        const width = videoRef.current.clientWidth;
        const height = videoRef.current.clientHeight;

        refCanvas.current.setAttribute('width', width);
        refCanvas.current.setAttribute('height', height);

        const ctx = refCanvas.current.getContext('2d');
        ctx.drawImage(videoRef.current, 0, 0, width, height);
        let URL = refCanvas.current.toDataURL();
        setImages([...images, { camera: URL }]);
    };

    const handleStopStream = () => {
        tracks.stop();
        setStream(false);
    };

    const handleSubmit = e => {
        e.preventDefault();
        if (images.length === 0)
            return dispatch({
                type: GLOBALTYPES.ALERT,
                payload: { error: 'Please add your photo.' },
            });

        if (vente.onEdit) {
            dispatch(updatePost({ postData, images, auth, vente }));
        } else {
            dispatch(createPost({ postData, images, auth, socket }));
        }

        setPostData(postData);
        setImages([]);
        if (tracks) tracks.stop();
        dispatch({ type: GLOBALTYPES.VENTE, payload: false });
    };

    useEffect(() => {
        if (vente.onEdit) {
            console.log("Datos de edición:", vente);
            setPostData({
                content: vente.content || "",
                email: vente.email || "",
                superficie: vente.superficie || "",
                piece: vente.piece || "",
                etage: vente.etage || "",
                papiers: vente.papiers || "",
                papiersOption: vente.papiersOption || "", // Campo para la opción seleccionada de papiers
                papiersSubOption: vente.papiersSubOption || "", // Campo para oferta/change
            });
            setImages(vente.images || []); // Asegurar imágenes
        }
    }, [vente]);
    


    const handleChangeInput = (e) => {
        const { name, value } = e.target;
        setPostData({ ...postData, [name]: value });
    };

    return (
        <div className='status_modal' >
            <form onSubmit={handleSubmit}>
                <div className="status_header">
                    <h5 className="m-0">Vente immobiler</h5>
                    <span onClick={() => dispatch({
                        type: GLOBALTYPES.VENTE, payload: false
                    })}>
                        &times;
                    </span>
                </div>

                <div className="status_body">
                <div className="form-group">
    <div>
        <select
            onChange={handleChangeInput}
            value={postData.content} // Aseguramos que este valor sea reflejado correctamente
            name="content"
            className="form-control"
            required
        >
            <option value="">Sélectionner une catégorie</option>
            <option value="superficie">Superficie</option>
            <option value="email">Email</option>
        </select>
        <small className='text-danger'>Ce champ est requis</small>
    </div>

    {/* Opciones dinámicas basadas en "content" */}
    {postData.content === "superficie" && (
        <div>
            <div className="form-group">
                <input
                    type="text"
                    name="piece"
                    value={postData.piece}
                    onChange={handleChangeInput}
                    className="form-control"
                    placeholder="Mémoire"
                />
            </div>
            <div className="form-group">
                <input
                    type="text"
                    name="etage"
                    value={postData.etage}
                    onChange={handleChangeInput}
                    className="form-control"
                    placeholder="Etage"
                />
                <small className='text-danger'>Ce champ est requis</small>
            </div>
        </div>
    )}

    {postData.content === "email" && (
        <div>
            <div className="form-group">
                <select
                    onChange={handleChangeInput}
                    value={postData.papiersOption} // Guardar la opción seleccionada
                    name="papiersOption"
                    className="form-control"
                >
                    <option value="">Sélectionner une option</option>
                    <option value="email">Email</option>
                    <option value="papiers">Papiers</option>
                </select>
            </div>

            {/* Mostrar el select para las opciones "oferta" y "change" cuando 'papiersOption' tenga el valor "papiers" */}
            {postData.papiersOption === "papiers" && (
                <div className="form-group">
                    <select
                        onChange={handleChangeInput}
                        value={postData.papiersSubOption} // Guardar la opción seleccionada de subcategoría
                        name="papiersSubOption"
                        className="form-control"
                    >
                        <option value="">Sélectionner une option</option>
                        <option value="oferta">Oferta</option>
                        <option value="change">Change</option>
                    </select>
                </div>
            )}
        </div>
    )}
</div>



                    <div className="show_images">
                        {
                            images.map((img, index) => (
                                <div key={index} id="file_img">
                                    {
                                        img.camera ? imageShow(img.camera, theme)
                                            : img.url
                                                ? <>
                                                    {
                                                        img.url.match(/video/i)
                                                            ? videoShow(img.url, theme)
                                                            : imageShow(img.url, theme)
                                                    }
                                                </>
                                                : <>
                                                    {
                                                        img.type.match(/video/i)
                                                            ? videoShow(URL.createObjectURL(img), theme)
                                                            : imageShow(URL.createObjectURL(img), theme)
                                                    }
                                                </>
                                    }
                                    <span onClick={() => deleteImages(index)}>&times;</span>
                                </div>
                            ))
                        }
                    </div>

                    {
                        stream &&
                        <div className="stream position-relative">
                            <video autoPlay muted ref={videoRef} width="100%" height="100%"
                                style={{ filter: theme ? 'invert(1)' : 'invert(0)' }} />

                            <span onClick={handleStopStream}>&times;</span>
                            <canvas ref={refCanvas} style={{ display: 'none' }} />
                        </div>
                    }

                    <div className="input_images">
                        {
                            stream
                                ? <i className="fas fa-camera" onClick={handleCapture} />
                                : <>
                                    <i className="fas fa-camera" onClick={handleStream} />

                                    <div className="file_upload">
                                        <i className="fas fa-image" />
                                        <input type="file" name="file" id="file"
                                            multiple accept="image/*,video/*" onChange={handleChangeImages} />
                                    </div>
                                </>
                        }

                    </div>



                    <div className="status_footer">
                        <button className="btn btn-secondary w-100" type="submit">
                            Post
                        </button>
                    </div>
                </div>
            </form >
        </div >
    )
}

export default Vente
