import React, { useState, useRef, useEffect } from 'react'
import { useSelector, useDispatch } from 'react-redux'
import { GLOBALTYPES } from '../../../redux/actions/globalTypes';

import { createPost, updatePost } from '../../../redux/actions/postAction';

import { imageShow, videoShow } from '../../../utils/mediaShow'

import 'rc-slider/assets/index.css';  // Importar los estilos predeterminados
const SubCategoriesImmobilier = () => {
    const { auth, theme, socket } = useSelector(state => state)
    const dispatch = useDispatch()

    const [postData, setPostData] = useState({
        content: '',

        modelos: [],
        category: '',
        title: ''
    });

    const [images, setImages] = useState([])

    const [stream, setStream] = useState(false)
    const videoRef = useRef()
    const refCanvas = useRef()
    const [tracks, setTracks] = useState('')






    const handleChangeImages = e => {
        const files = [...e.target.files]
        let err = ""
        let newImages = []

        files.forEach(file => {
            if (!file) return err = "File does not exist."

            if (file.size > 1024 * 1024 * 5) {
                return err = "The image/video largest is 5mb."
            }

            return newImages.push(file)
        })

        if (err) dispatch({ type: GLOBALTYPES.ALERT, payload: { error: err } })
        setImages([...images, ...newImages])
    }


    const deleteImages = (index) => {
        const newArr = [...images]
        newArr.splice(index, 1)
        setImages(newArr)
    }

    const handleStream = () => {
        setStream(true)
        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
            navigator.mediaDevices.getUserMedia({ video: true })
                .then(mediaStream => {
                    videoRef.current.srcObject = mediaStream
                    videoRef.current.play()

                    const track = mediaStream.getTracks()
                    setTracks(track[0])
                }).catch(err => console.log(err))
        }
    }

    const handleCapture = () => {
        const width = videoRef.current.clientWidth;
        const height = videoRef.current.clientHeight;

        refCanvas.current.setAttribute("width", width)
        refCanvas.current.setAttribute("height", height)

        const ctx = refCanvas.current.getContext('2d')
        ctx.drawImage(videoRef.current, 0, 0, width, height)
        let URL = refCanvas.current.toDataURL()
        setImages([...images, { camera: URL }])
    }

    const handleStopStream = () => {
        tracks.stop()
        setStream(false)
    }

    const handleSubmit = (e) => {
        e.preventDefault();


        if (images.length === 0)
            return dispatch({
                type: GLOBALTYPES.ALERT,
                payload: { error: "Please add your photo." },
            });

        setPostData({
            content: '',
            modelos: [],
            category: '',
            title: ''
        });
        setImages([]);
        if (tracks) tracks.stop();
        dispatch({ type: GLOBALTYPES.STATUS, payload: false });
    };



    const handleChangeInput = (e) => {
        const { name, value } = e.target;
        setPostData({ ...postData, [name]: value });
    };


    return (
        <div  >
            <form onSubmit={handleSubmit}>
                <div className="status_header">
                    <h5 className="m-0">Create Post immobiler</h5>
                    <div  >
                        <Link className="dropdown-item" to='/annonces'></Link>

                        Atras
                        &times;
                    </div>
                </div>

                <div className=" ">
                    <textarea
                        name="content"
                        value={postData.content}
                        placeholder={`${auth.user.username}, what are you thinking?`}
                        onChange={handleChangeInput}
                        style={{
                            filter: theme ? 'invert(1)' : 'invert(0)',
                            color: theme ? 'white' : '#111',
                            background: theme ? 'rgba(0,0,0,.03)' : '',
                        }}
                    />

                    <input
                        type="text"
                        name="title"
                        value={postData.title}
                        placeholder="Enter a title"
                        onChange={handleChangeInput}
                    />
                    <div className='form-group'>
                        <select
                            name="category"
                            value={postData.category}
                            onChange={handleChangeInput}
                            className="form-control" >
                            <option value="Vente">Vente</option>
                            <option value="Location">Location</option>

                            <option value="Location-Vacances">Location Vacances</option>
                            <option value="Echange">Echange</option>
                            <option value="Cherche-Location">Cherche Location</option>
                            <option value="Cherche Achat">Cherche Achat</option>
                        </select>

                    </div>

                    <input
                        type="text"
                        name="modelos"
                        value={postData.modelos}
                        placeholder="Enter models (comma-separated)"
                        onChange={(e) => setPostData({
                            ...postData,
                            modelos: e.target.value.split(',')
                        })}
                    />


                    <div className="show_images">
                        {
                            images.map((img, index) => (
                                <div key={index} id="file_img">
                                    {
                                        img.camera ? imageShow(img.camera, theme)
                                            : img.url
                                                ? <>
                                                    {
                                                        img.url.match(/video/i)
                                                            ? videoShow(img.url, theme)
                                                            : imageShow(img.url, theme)
                                                    }
                                                </>
                                                : <>
                                                    {
                                                        img.type.match(/video/i)
                                                            ? videoShow(URL.createObjectURL(img), theme)
                                                            : imageShow(URL.createObjectURL(img), theme)
                                                    }
                                                </>
                                    }
                                    <span onClick={() => deleteImages(index)}>&times;</span>
                                </div>
                            ))
                        }
                    </div>

                    {
                        stream &&
                        <div className="stream position-relative">
                            <video autoPlay muted ref={videoRef} width="100%" height="100%"
                                style={{ filter: theme ? 'invert(1)' : 'invert(0)' }} />

                            <span onClick={handleStopStream}>&times;</span>
                            <canvas ref={refCanvas} style={{ display: 'none' }} />
                        </div>
                    }

                    <div className="input_images">
                        {
                            stream
                                ? <i className="fas fa-camera" onClick={handleCapture} />
                                : <>
                                    <i className="fas fa-camera" onClick={handleStream} />

                                    <div className="file_upload">
                                        <i className="fas fa-image" />
                                        <input type="file" name="file" id="file"
                                            multiple accept="image/*,video/*" onChange={handleChangeImages} />
                                    </div>
                                </>
                        }

                    </div>

                </div>

                <div className="status_footer">
                    <button className="btn btn-secondary w-100" type="submit">
                        Post
                    </button>
                </div>

            </form>
        </div>
    )
}




export default SubCategoriesImmobilier;
